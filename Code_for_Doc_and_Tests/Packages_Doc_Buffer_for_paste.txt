=========== rjd3 x13
.jd2r_spec_x11	Java Utility Functions
.jd2r_spec_x13	Java Utility Functions
.r2jd_spec_x11	Java Utility Functions
.r2jd_spec_x13	Java Utility Functions
.x13_rslts	Java Utility Functions
fast_regarima	RegARIMA model, pre-adjustment in X13
fast_x13	Seasonal Adjustment with X13-ARIMA
jd3_utilities	Java Utility Functions
jx13	Seasonal Adjustment with X13-ARIMA
refresh	Refresh Policy
regarima	RegARIMA model, pre-adjustment in X13
regarima_outliers	Outlier Detection with a RegARIMA Model
regarima_refresh	Refresh Policy
set_x11	Set X-11 Specification
spec_regarima	RegARIMA/X-13 Default Specifications
spec_x11	RegARIMA/X-13 Default Specifications
spec_x13	RegARIMA/X-13 Default Specifications
userdefined_variables_x13	List of all available estimation output objects (series, parameters, diagnostics)
x11	X-11 Decomposition Algorithm
x13	Seasonal Adjustment with X13-ARIMA
x13_refresh	Refresh Policy


#' @seealso \code{\link{chained_calendar}}, \code{\link{composite_day}}
#' @references
#' More information on calendar correction in JDemetra+ online documentation:
#' \url{https://jdemetra-new-documentation.netlify.app/}

============ rjd3toolkit
gnerating regressors 
-- without calendar


### conflict 6 avril potential pb 
#' @param meanCorrection Boolean indicating if the regressors are corrected for long-term mean (e.g seasonally adjusted).


---------------
#' Trading day regressors without holidays

#' @description
#' Allows to generate trading day regressors (as many as defined groups), taking into account
#' 7 or less different types of days, from Monday to Sunday, but no specific holidays. Regressors are not
#' corrected for long term mean.
#' @details
#' Aggregated values for monthly or quarterly are the sums of the number of days belonging to a given group.
#' Contrasts are the differences between the number of days in a given group (1 to 6) and the number of days in
#' the reference group (0).
#' @param frequency Frequency of the series, number of periods per year (12,4,3,2..)
#' @param start,length First date (array with the first year and the first period)
#' (for instance `c(1980, 1)`) and number of periods of the output variables. Can also be provided with the `s` argument
#' @param s time series used to get the dates for the trading days variables. If supplied the
#' parameters `frequency`, `start` and `length` are ignored.
#' @param groups Groups of days. The length of the array must be 7. It indicates to what group each week day
#' belongs. The first item corresponds to Mondays and the last one to Sundays. The group used for contrasts (usually Sundays) is identified by 0.
#' The other groups are identified by 1, 2,... n (<= 6). For instance, usual trading days are defined by c(1,2,3,4,5,6,0),
#' week days by c(1,1,1,1,1,0,0), week days, Saturdays, Sundays by c(1,1,1,1,1,2,0) etc...
#' @param contrasts If true, the variables are defined by contrasts with the 0-group. Otherwise, raw number of days is provided.
#'
#' @return Time series (object of class \code{c("ts","mts","matrix")}) corresponding to each group, starting with the 0-group (\code{contrasts = FALSE})
#' or the 1-group (\code{contrasts = TRUE}).
#' @seealso \code{\link{calendar_td}}
#' @references
#' More information on calendar correction in JDemetra+ online documentation:
#' \url{https://jdemetra-new-documentation.netlify.app/a-calendar-correction}
#' @export
#' @examples
#' # Monthly regressors for Trading Days: each type of day is different, contrasts to Sundays (6 series)
#' regs_td<- td(12,c(2020,1),60, groups = c(1, 2, 3, 4, 5, 6, 0), contrasts = TRUE)
#' # Quarterly regressors for Working Days: week days are similar, contrasts to week-end days (1 series)
#' regs_wd<- td(4,c(2020,1),60, groups = c(1, 1, 1, 1, 1, 0, 0), contrasts = TRUE)


==== ADD wherever possible
	- DEFAULT 
	- RANGE 


SPEC puffer

#' Manage Outliers/Ramps in Specification
#'
#' Generic function to add outliers or Ramp regressors (\code{add_outlier()} and \code{add_ramp()})
#' to a specification or to remove them (\code{remove_outlier()} and \code{remove_ramp()}).
#'
#' @param x the specification to customize.
#' Must be a JD3_X13_SPEC" class object generated with \code{rjd3x13::spec_x13()}
#' (or "JD3_REGARIMA_SPEC" generated with \code{rjd3x13::spec_regarima()} or "JD3_TRAMOSEATS_SPEC"
#' generated with \code{rjd3tramoseats::spec_tramoseats()} or "JD3_TRAMO_SPEC" generated with
#' \code{rjd3tramoseats::spec_tramo()}).
#' @param type, date type and date of the outliers. Possible \code{type} are:
#' \code{"AO"} = additive, \code{"LS"} = level shift, \code{"TC"} = transitory change and
#' \code{"SO"} = seasonal outlier.
#' @param start,end dates of the ramp regressor.
#' @param name the name of the variable (to format print).
#' @param coef the coefficient if needs to be fixed. If equal to 0 the outliers/ramps coefficients
#' are estimated.
#' @details
#' \code{x} specification param must be a JD3_X13_SPEC" class object generated with \code{rjd3x13::spec_x13()}
#' (or "JD3_REGARIMA_SPEC" generated with \code{rjd3x13::spec_regarima()} or "JD3_TRAMOSEATS_SPEC"
#' generated with \code{rjd3tramoseats::spec_tramoseats()} or "JD3_TRAMO_SPEC" generated with
#' \code{rjd3tramoseats::spec_tramo()}).
#' If a Seasonal adjustment process is performed, each type of Outlier will be allocated to a pre-defined
#' component after the decomposition: "AO" and "TC" to the irregular, "LS" and Ramps to the trend.
#' @examples
#' init_spec <- rjd3x13::spec_x13("RSA5c")
#' new_spec<-rjd3toolkit::add_outlier(init_spec, type="AO", date="2012-01-01")
#' # ramp on year 2012
#' new_spec<-rjd3toolkit::add_ramp(init_spec,start="2012-01-01",end="2012-12-01")
#' @seealso \code{\link{add_usrdefvar}}, \code{\link{intervention_variable}}
#' @references
#' More information on auxiliary variables in JDemetra+ online documentation:
#' \url{https://jdemetra-new-documentation.netlify.app/}
#' @export
